---
title: '`glitter` makes SPARQL'
subtitle: '`glitter`, un package R pour explorer et collecter des données du web sémantique'
author: "Lise Vaudor, Maëlle Salmon"
institute: "Rencontres R 2023, Avignon"
date: "21/06/2023"
format: 
  revealjs:
    df-print: kable
    scrollable: true
    logo: img/logo_small.png
    css:
     styles.css
---

```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE, cache=TRUE)
library(glitter)
library(tidyverse)
library(kableExtra)
library(stringr)
 show=function(dt){
   dt %>% 
     as.data.frame() %>% 
     kable() %>% 
     kable_styling(bootstrap_options = c("hover","condensed"),
                 full_width = F,
                 position = "float_left",
                 font_size = 10)
   }
```

## Projet RECIT

Appel à projet de l'ENS de Lyon "Projets émergents" => 💰 20 000 euros sur 3 ans

![](img/RECIT.png)


## Web sémantique, linked open data, web des données

![© Camille Scheffler](img/web_des_donnees_cscheffler.png){width="1500px"}

## Formalisation des Linked Open Data

![© Camille Scheffler](img/LOD_principes_cscheffler.png){width="1500px"} [exemple: URI correspondant au film "Marius et Jeannette" sur Wikidata](https://www.wikidata.org/wiki/Q3293881)

## Package glitter: objectifs

![](img/logo_glitter.png)

🎯 Promouvoir l'usage (exploration, recueil, analyse) des données du web sémantique pour les chercheur·se·s et étudiant·e·s **usagers de R**, en:

-   facilitant l'**écriture** des requêtes SPARQL
-   facilitant l'**envoi** des requêtes
-   favoriser l'analyse/valorisation ultérieure dans R

En tant que "**Domain Specific Language**" (DSL), glitter correspond à une *syntaxe* et des *fonctions* plus proches du tidyverse et base R que de SPARQL.

## Linked Open Data: difficultés d'appropriation et de collecte

<table><td>
- 👀 ce qu'on appréhende directement: le web documentaire 
- 💭 difficultés liées à la structure des données en graphes 
- 🔮 métadonnées intégrées aux données 
- 🧠️ transformation en données tabulaires pour analyse
- ⛏️ difficultés de collecte (SPARQL)   

</td><td>



![Du graphe de connaissances au tableau de données](img/donnees_en_graphe.png){width="600px"}
</td></table>

## Exemple de requête simple

<table><td>

Dans R, sans glitter:

```{r bef_glitter, eval=FALSE} 
query='SELECT ?film ?filmLabel 
   WHERE { 
   ?film wdt:P31 wd:Q11424. 
   SERVICE wikibase:label{
      bd:serviceParam wikibase:language "[AUTO_LANGUAGE],en".}
   } 
   LIMIT 10' 
result=WikidataQueryServiceR::query_wikidata(query) 
```

Dans R, avec glitter: 

```{r glitter_no_SPARQL} 
tib <- spq_init() %>% 
spq_add("?film wdt:P31 wd:Q11424", .label="?film") %>%
spq_head(n=10) %>%
spq_perform()
```
</td><td>

- 🖊️ Rédaction et envoi de commandes R
- 🎁 Recueil du tableau de résultats en tant qu'objet R 
- 🎯 Chaîne de traitement reproductible 

```{r show_result_init, echo=FALSE}
tib
```

</td></table>

## Dimension de la requête?

Combien de films dans Wikidata:

```{r req_glob_lf}
tib <- spq_init() %>%                 # Initialise requête puis
  spq_add("?film wdt:P31 wd:Q11424",  # Ajoute motif "?film est une instance de film"
          .label="?film") %>%         # ... étiquette ?film puis
  spq_summarise(n_films=n()) %>%      # Résume en comptant le nombre de films puis
  spq_perform()                       # Envoie la requête
```

```{r req_glob_lf_show , echo=FALSE}
tib
```

## Données enrichies pour produire une carte

```{r lf_2}
lf_2=spq_init() %>%                     # Initialise requête puis
  spq_add("?film wdt:P31 wd:Q11424",    # Ajoute motif "?film est une instance de film"
          .label="?film") %>%           # ... étiquette ?film puis
  spq_add("?film wdt:P840 ?loc",        # Ajoute motif "?film a pour localisation narrative ?loc
          .label="?loc") %>%            # ... étiquette ?loc puis
  spq_add("?loc wdt:P625 ?coords") %>%  # Ajoute les coordonnées de ?loc puis
  spq_add("?film wdt:P3383 ?image") %>% # Ajoute l'affiche du film 
  spq_add("?film wdt:P921 ?subject",    # Ajoute ?subject
          .label="?subject",            # et l'étiquette associée
          .required=FALSE) %>%          # si dispo
  spq_add("?film wdt:P577 ?date") %>%   # Ajoute ?date (la date de sortie) puis
  spq_mutate(year=year(date)) %>%       # Ajoute variable year qui correspond à l'année de ?date puis
  spq_select(-date) %>%                 # Retire date des variables renvoyées 
  spq_language("fr,en") %>%             # Etiquette quand demandé de préférence en français, à défaut en anglais puis
  spq_perform()                         # Envoie la requête
```

Cette table comprend `r nrow(lf_2)` lignes (films avec localisation narrative, coordonnées associées et affiche). Voici les premières:

```{r calc_lf_2_show, echo=FALSE}
lf_2_show <- lf_2 %>% 
   select(filmLabel, locLabel,coords, image,subjectLabel, year) %>% 
   unique() %>% 
   head()
```

```{r lf_2_show}
lf_2_show
```

## Carte mondiale des lieux de fiction

```{r lf_c, echo=FALSE}
lf_c=lf_2 %>%    # Considère lf_2 puis
  clean_wikidata_table() %>% # préfixe les uri
  select(film,ends_with("Label"),coords,image,year) %>%  # Sélectionne ces variables (dont "....Label") puis
  group_by(film,coords,image,locLabel,filmLabel) %>%     # Groupe par ces variables puis 
  summarise(subjectLabel=paste0(unique(subjectLabel),    # Résume par groupe: le sujet (sur une seule ligne)   
                                        collapse=", "),  #  ... en séparant les éléments par ", "
            year=min(year),                              #  ... et l'année comme minimum des années de sortie   
            .groups="drop")                              # Dégroupe
```

```{r, echo=FALSE}
lf_m =lf_c %>% 
  transform_wikidata_coords("coords") %>% 
  mutate(popup=glue::glue("<h1>{filmLabel}</h1>
                           <li>Lieu: {locLabel}</li>
                           <li>Année de sortie: {year}</li>")) %>% 
  mutate(popup=case_when(is.na(image)~popup,
                         !is.na(image)~glue::glue("{popup}
                                                  <img src='{image}' height='200'>"))) %>% 
  mutate(popup=case_when(is.na(subjectLabel)~popup,
                         !is.na(subjectLabel)~glue::glue("{popup}
                                                         <li>Thèmes: {subjectLabel}</li>")))
```

```{r build_map_film, echo=FALSE}
library(leaflet) 
# Définition d'une échelle colorée 
# (en fonction de date de sortie) 
pal <- colorNumeric(c("red", "green", "blue"), c(1895,1950,1970,1990,2010,2023)) 
# Création de la carte 
map=leaflet(lf_m) %>% # déf carte 
  addTiles() %>% # ajout fond de carte
  addCircleMarkers(col=~pal(year), ~lng, ~lat,
                   popup = ~popup,
                   clusterOptions = markerClusterOptions()) 
```

```{r show_map, echo=FALSE}
map 
```

## Package glitter: vue d'ensemble

![](img/tidyverse_logo.jpeg){width="50px"} Un package qui suit quelques principes du tidyverse...

-   usage du **pipe %>%**
-   fonctions à **préfixe** (ici `spq_`)
-   vise à la **facilité d'utilisation** (décomposition en étapes élémentaires)
-   **évaluation** tidy (référence directe aux noms de variables)
-   attention accordée à la **documentation** (par exemple via des **vignettes**) 

## Package glitter: fonctions principales

<table><td> 
Fonctions de base:

- spq_init() pour initier une requête 
- spq_add() pour rajouter un motif de triplet 
- spq_perform() pour envoyer la requête 
</td><td>

![](img/dplyr_logo.jpeg){width="50px"} Fonctions inspirées de dplyr :

- spq_filter() 
- spq_select() 
- spq_arrange() 
- spq_mutate() 
- spq_group_by() 
- spq_summarise() 

=> "Where the magic is" (Maëlle)

</td></table>

## Généralisation à l'usage d'autres endpoints

![](img/logos_endpoints.png){width="1000px"} Exemple de requête sur le SPARQL endpoint de dbpedia:

```{r dbpedia}
tib <- spq_init() %>%
  spq_add("?person dbo:birthPlace ?place") %>% # ?personne est née à ?place
  spq_add("?person dbo:profession ?job") %>%   # ?personne a pour profession ?job
  spq_add("?job rdfs:label ?jobLabel") %>%     # ?job a pour étiquette ?jobLabel
  spq_filter(lang(jobLabel)=="en") %>%         # Filtre pour ne garder que les étiquettes en anglais
  spq_add("?place rdfs:label 'Lyon'@en") %>%   # ?place a pour étiquette 'Lyon' (en anglais)
  spq_head(10) %>%
  spq_perform("dbpedia")                       # Envoie sur le SPARQL endpoint de DBPEDIA
```

```{r show_dbpedia,  echo=FALSE}
tib
```

## Utiliser les LOD pour recueillir et compléter des données

Exemples pratiques d'utilisation:

-   🌻 données **botaniques** => associer une photo et un nom vernaculaire à un nom d'espèce en latin
-   📜 corpus de **communiqués de presse du Ministère de l'Ecologie** => récupérer le nom du ministre, avec les dates de début et de fin de son mandat.
-   🏙️ lien entre **grandes villes et plaines alluviales** => récupérer les populations des grandes villes et leurs coordonnées, associer à une rivière
-   🌍 **carte du monde** basée sur un shapefile avec des codes pays => récupérer les noms de pays, le nom et les coordonnées de leur capitales

=> Richesse thématique pour (par exemple) la construction de **jeux de données pédagogiques**

## Et maintenant?

![](img/chantier.png){width="100px"} Chantier en cours!

📣 Retours utilisateurs bienvenus

![](img/github_logo.png){width="25px"} Package installable et modifiable ici [https://github.com/lvaudor/glitter](https://github.com/lvaudor/glitter).

🧠 Cas d'usages: à vous de jouer!

🙏 Merci pour votre attention!

